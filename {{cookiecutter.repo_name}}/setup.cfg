[metadata]
description-file = README.rst

{% if cookiecutter.c_extension_support == "no" -%}
[bdist_wheel]
universal = 1

{% endif -%}
{%- if cookiecutter.linter == "flake8" %}
[flake8]
# Remove trailing whitespace, then configure your editor to keep it away:
#   W291 - Remove trailing whitespace.
#   W293 - Remove trailing whitespace on blank line.
# Use your editor to find/replace all tabs, if any, with spaces, and then fix indentation with these error codes. This can have a semantic impact so the changes need to be reviewed carefully:
#   E101 - Reindent all lines.
#   E121 - Fix indentation to be a multiple of four.
# Fix whitespace errors:
#   E126 continuation line over-indented for hanging indent    
#   E20 - Remove extraneous whitespace.
#   E211 - Remove extraneous whitespace.
#   E22 - Fix extraneous whitespace around keywords.
#   E224 - Remove extraneous whitespace around operator.
#   E226 - Fix missing whitespace around arithmetic operator.
#   E227 - Fix missing whitespace around bitwise/shift operator.
#   E228 - Fix missing whitespace around modulo operator.
#   E231 - Add missing whitespace.
#   E241 - Fix extraneous whitespace around keywords.
#   E242 - Remove extraneous whitespace around operator.
#   E251 - Remove whitespace around parameter '=' sign.
#   E27 - Fix extraneous whitespace around keywords.
# Adjust blank lines:
#   W391 - Remove trailing blank lines.
#   E301 - Add missing blank line.
#   E302 - Add missing 2 blank lines.
#   E303 - Remove extra blank lines.
#   E304 - Remove blank line following function decorator.
#   E309 - Add missing blank line (after class declaration).
# Fix comment spacing:
#   E26 - Fix spacing after comment hash for inline comments.
#   E265 - Fix spacing after comment hash for block comments.
# The following are aggressive fixes that can have semantic impact. It's best to do these one commit at a time and with careful review:
#   E711 - Fix comparison with None.
#   E712 - Fix comparison with boolean.
#   E721 - Use "isinstance()" instead of comparing types directly.
#   W601 - Use "in" rather than "has_key()".
#   W602 - Fix deprecated form of raising exception.
#   W603 - Use "!=" instead of "<>"
ignore =
    W293
    W291
    W503
    E126 
    E265
    E266
    E262
    E302
    F405
    F841
    F731
max-line-length = 140
exclude = 
    */migrations/*
    */templates/*
{%- else %}
[pylama]
format = pylint
skip = 
    */migrations/*
    */templates/*

[pylama:pycodestyle]
max_line_length = 140
{%- endif %}

{% if cookiecutter.test_runner == "pytest" -%}
[tool:pytest]
{%- if cookiecutter.test_matrix_separate_coverage == 'yes' or cookiecutter.test_matrix_configurator == 'yes' %}
norecursedirs =
    .git
    .tox
    .env
    envs
    dist
    build
    migrations
{% else %}
testpaths = tests
norecursedirs =
    migrations
{% endif %}
python_files =
    test_*.py
    *_test.py
    tests.py
addopts =
    -ra
    --strict
{%- if cookiecutter.test_matrix_separate_coverage == 'yes' or cookiecutter.test_matrix_configurator == 'yes' %}
    --ignore=docs/conf.py
    --ignore=setup.py
    --ignore=ci
    --ignore=.eggs
{%- endif %}
    --doctest-modules
    --doctest-glob=\*.rst
    --tb=short
[aliases]
test=pytest
{% elif cookiecutter.test_runner == "nose" -%}
[nosetests]
verbosity = 2

{% endif -%}
[isort]
force_single_line = True
line_length = 120
known_first_party = {{ cookiecutter.package_name }}
default_section = THIRDPARTY
forced_separate = test_{{ cookiecutter.package_name }}
not_skip = __init__.py
skip = migrations,templates

{%- if cookiecutter.test_matrix_configurator == "yes" %}

[matrix]
# This is the configuration for the `./bootstrap.py` script.
# It generates `.travis.yml`, `tox.ini` and `appveyor.yml`.
#
# Syntax: [alias:] value [!variable[glob]] [&variable[glob]]
#
# alias:
#  - is used to generate the tox environment
#  - it's optional
#  - if not present the alias will be computed from the `value`
# value:
#  - a value of "-" means empty
# !variable[glob]:
#  - exclude the combination of the current `value` with
#    any value matching the `glob` in `variable`
#  - can use as many you want
# &variable[glob]:
#  - only include the combination of the current `value`
#    when there's a value matching `glob` in `variable`
#  - can use as many you want

python_versions =
{%- set pyenvs = cookiecutter.python_envs|replace(' ','') %}
{%- for env in pyenvs.split(',') %}
    {{ { "py27": "2.7", "py33": "3.3", "py34": "3.4", "py35": "3.5", "py36": "3.6", "py37": "3.7", "pypy": "pypy", "pypy3": "pypy3" }.get(env) }}
{%- endfor %}

dependencies =
#    1.4: Django==1.4.16 !python_versions[3.*]
#    1.5: Django==1.5.11
#    1.6: Django==1.6.8
#    1.7: Django==1.7.1 !python_versions[2.6]
# Deps commented above are provided as examples. That's what you would use in a Django project.

coverage_flags =
    cover: true
    nocov: false

environment_variables =
    -
{% endif %}
