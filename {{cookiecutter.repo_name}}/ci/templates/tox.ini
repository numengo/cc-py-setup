[tox]
envlist =
    clean,
    {% if cookiecutter.test_runner == "pytest" %}check,{% endif %}
{% raw %}{% for env in tox_environments|sort %}
    {{ env }},
{% endfor %}{% endraw %}
    {% if cookiecutter.test_runner == "pytest" %}report,{% endif %}
    docs

[testenv]
basepython =
    {docs,spell}: {env:TOXPYTHON:python2.7}
    {bootstrap,clean,check,report,extension-coveralls,coveralls,codecov}: {env:TOXPYTHON:python3}
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
passenv =
    *
deps =
    future
    pathlib
{%- if cookiecutter.test_runner == "pytest" %}
    pytest
    pytest-travis-fold
{%- else %}
    nose
{%- endif %}
commands =
{%- if cookiecutter.c_extension_support != "no" %}
    python setup.py clean --all build_ext --force --inplace
{%- endif %}
{%- if cookiecutter.test_runner == "pytest" %}
    {posargs:pytest -vv --ignore=src}
{%- else %}
    {posargs:nosetests -v tests}
{%- endif %}
{%- raw %}

[testenv:spell]
setenv =
    SPELLCHECK=1
commands =
    sphinx-build -b spelling docs dist/docs
skip_install = true
usedevelop = false
deps =
    -r{toxinidir}/docs/requirements.txt
    sphinxcontrib-spelling
    pyenchant

[testenv:docs]
deps =
    -r{toxinidir}/docs/requirements.txt
commands =
    sphinx-build {posargs:-E} -b html docs dist/docs
    sphinx-build -b linkcheck docs dist/docs

[testenv:bootstrap]
deps =
    jinja2
    matrix
    pathlib
    tox
skip_install = true
usedevelop = false
commands =
    python ci/bootstrap.py
{%- endraw %}
{%- if cookiecutter.c_extension_support == 'cython' %}

[testenv:cythonize]
basepython = {env:TOXPYTHON:python}
deps =
    Cython
skip_install = true
commands =
    python setup.py build
{% endif %}{%- raw %}
[testenv:check]
deps =
    docutils
    check-manifest
{%- endraw %}{%- if cookiecutter.linter == "flake8" %}
    flake8
{%- else %}
    pylama
{%- endif %}{%- raw %}
    readme-renderer
    pygments
    isort
    yapf
    future
skip_install = true
usedevelop = false
commands =
    python setup.py check --strict --metadata --restructuredtext
    check-manifest {toxinidir}
{%- endraw %}{%- if cookiecutter.linter == "flake8" %}
    flake8 src tests setup.py
{%- else %}
    pylama src tests setup.py
{%- endif %}
    isort --verbose --check-only --diff --recursive src tests setup.py

[testenv:coveralls]
deps =
    coveralls
skip_install = true
usedevelop = false
commands =
    coveralls{%- if cookiecutter.c_extension_support != "no" %} --merge=extension-coveralls.json{% endif %} []

[testenv:codecov]
deps =
    codecov
skip_install = true
usedevelop = false
commands =
    coverage xml --ignore-errors
    codecov []

{% if cookiecutter.c_extension_support != "no" %}
[testenv:extension-coveralls]
deps =
    cpp-coveralls
skip_install = true
usedevelop = false
commands =
    coveralls --build-root=. --include=src --dump=extension-coveralls.json []
{% endif -%}
{% raw %}
[testenv:report]
deps = coverage
skip_install = true
usedevelop = false
commands =
    coverage combine --append
    coverage report
    coverage html

[testenv:clean]
commands = coverage erase
skip_install = true
usedevelop = false
deps = coverage

{% for env, config in tox_environments|dictsort %}
[testenv:{{ env }}]
basepython = {env:TOXPYTHON:{{ config.python }}}
usedevelop = true
{% if config.cover or config.env_vars %}
setenv =
    {[testenv]setenv}
{% endif %}
{% for var in config.env_vars %}
    {{ var }}
{% endfor %}
{% if config.cover %}
{%- endraw -%}
{%- if cookiecutter.c_extension_support != "no" %}
    SETUPPY_CFLAGS=-coverage
{%- endif %}
{%- raw %}
usedevelop = true
commands =
{%- endraw -%}
{%- if cookiecutter.c_extension_support != "no" %}
    python setup.py clean --all build_ext --force --inplace
{%- endif %}
{%- if cookiecutter.test_runner == "pytest" %}
    {posargs:pytest --cov --cov-report=term-missing -vv}
{%- else %}
    {posargs:nosetests --with-coverage --cover-package={{ cookiecutter.package_name }}}
{%- endif %}
{%- raw %}
{% endif %}
{% if config.cover or config.deps %}
deps =
    {[testenv]deps}
{% endif %}
{% if config.cover %}
{%- endraw -%}
{%- if cookiecutter.test_runner == "pytest" %}
    pytest-cov
{%- else %}
    coverage
{%- endif %}
{%- raw %}
{% endif %}
{% for dep in config.deps %}
    {{ dep }}
{% endfor %}

{% endfor %}

{% endraw %}
